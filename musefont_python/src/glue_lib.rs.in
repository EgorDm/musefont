use std::{path::PathBuf, error::Error, string::ToString, str::FromStr};
use musefont::*;

foreign_class!(
#[derive(Clone)]
class Sym {
	self_type Sym;
	constructor Sym::default() -> Sym;
	fn Sym::is_valid(&self) -> bool;
	fn Sym::code(&self) -> i32;
	fn Sym::index(&self) -> u32;
	fn Sym::bbox(&self) -> &RectF;
	fn Sym::advance(&self) -> f32;
	fn Sym::stem_down_nw(&self) -> &Point2F;
	fn Sym::stem_up_se(&self) -> &Point2F;
	fn Sym::cut_out_ne(&self) -> &Point2F;
	fn Sym::cut_out_nw(&self) -> &Point2F;
	fn Sym::cut_out_se(&self) -> &Point2F;
	fn Sym::cut_out_sw(&self) -> &Point2F;
	fn Sym::compound_ids(&self) -> &Vec<u32>;
});


foreign_class!(
#[derive(Clone)]
class GlyphPixmap {
	self_type GlyphPixmap;
	constructor GlyphPixmap::default() -> GlyphPixmap;
	fn GlyphPixmap::offset(&self) -> &Point2F;
	fn GlyphPixmap::stride(&self) -> usize;
	fn GlyphPixmap::size(&self) -> Size2U;
	fn GlyphPixmap::width(&self) -> u32;
	fn GlyphPixmap::height(&self) -> u32;
	fn GlyphPixmap::format(&self) -> Format;
	fn GlyphPixmap::pixels(&self) -> &Vec<u8>;
});

fn fontconfig_load(path: &str) -> Result<FontConfig, FontLoadingError> {
	let path = PathBuf::from_str(path).map_err(|_| FontLoadingError::Other("Invalid path provided!".to_string()))?;
	FontConfig::new(&path)
}

foreign_class!(
class FontConfig {
	self_type FontConfig;
	constructor FontConfig::default() -> FontConfig;
    static_method fontconfig_load(path: &str) -> Result<FontConfig, FontLoadingError>; alias load;
    fn FontConfig::get_symid(&self, name: &str) -> u32;
});

fn scorefont_load(path: &str, name: &str, config: &FontConfig) -> Result<ScoreFont, FontLoadingError> {
	let path = PathBuf::from_str(path).map_err(|_| FontLoadingError::Other("Invalid path provided!".to_string()))?;
	load_font(&path, name, config)
}

fn scorefont_new(path: &str, name: &str, config: &FontConfig) -> ScoreFont {
	scorefont_load(path, name, config).unwrap()
}

foreign_class!(
class ScoreFont {
	self_type ScoreFont;
	constructor scorefont_new(path: &str, name: &str, config: &FontConfig) -> ScoreFont;
	static_method scorefont_load(path: &str, name: &str, config: &FontConfig) -> Result<ScoreFont, FontLoadingError>; alias load;
	fn ScoreFont::name(&self) -> &String;
	fn ScoreFont::family(&self) -> &String;
	fn ScoreFont::sym(&self, id: u32) -> &Sym;
	fn ScoreFont::bounding_box(&self, id: u32, mag: &Size2F) -> RectF;
	fn ScoreFont::advance(&self, id: u32, mag: f32) -> f32;
	fn ScoreFont::width(&self, id: u32, mag: f32) -> f32;
	fn ScoreFont::stem_down_nw(&self, id: u32, mag: f32) -> Point2F;
	fn ScoreFont::stem_up_se(&self, id: u32, mag: f32) -> Point2F;
	fn ScoreFont::cut_out_ne(&self, id: u32, mag: f32) -> Point2F;
	fn ScoreFont::cut_out_nw(&self, id: u32, mag: f32) -> Point2F;
	fn ScoreFont::cut_out_se(&self, id: u32, mag: f32) -> Point2F;
	fn ScoreFont::cut_out_sw(&self, id: u32, mag: f32) -> Point2F;
	fn ScoreFont::pixmap(&mut self, id: u32, scale: &Size2F, point_size: f32, rasterization_options: RasterizationOptions, format: Format) -> Option<&GlyphPixmap>;
});
